<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<!--
  libnkutils - Miscellaneous utilities

  Copyright © 2011-2017 Quentin "Sardem FF7" Glidic

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
-->
<refentry>
    <refsect2 id="nk-format-string-reference-description">
        <para>
            References use a shell-like format: <code>${<replaceable>reference-name</replaceable>}</code>.
            Each reference is resolved to a data that is substitued to the reference at the corresponding place in the string.
            The <replaceable>reference-name</replaceable> can be composed of alphabetic characters, dashes (<literal>'-'</literal>) and underscores (<literal>'_'</literal>).
        </para>
        <para>
            You can use an array-like syntax for some values: <code>${<replaceable>reference-name</replaceable>[<replaceable>key</replaceable>]}</code> (square brackets <literal>[]</literal> are literals here).
            The <replaceable>key</replaceable> can be a name or a number depending on the data pointed by <replaceable>reference-name</replaceable>.
            If <replaceable>key</replaceable> starts with a <literal>@</literal>, then the remaining is used as a join value.
            You can use fallback values, substitute values or regexes on array members. In case of joined values, such operations are done on the joined values as a whole.
        </para>
        <para>
            You can use a fallback value if the data resolves to <literal>nothing</literal> or <literal>false</literal>.
            The syntax is: <code>${<replaceable>reference-name</replaceable>:-<replaceable>fallback-value</replaceable>}</code>.
        </para>
        <para>
            You can use a substitute value if (and only if) the data resolves to <literal>something</literal> or <literal>true</literal>.
            The syntax is: <code>${<replaceable>reference-name</replaceable>:+<replaceable>substitute-value</replaceable>}</code>.
        </para>
        <para>
            You can use a substitute value if (and only if) the data resolves to <literal>nothing</literal> or <literal>false</literal>.
            The syntax is: <code>${<replaceable>reference-name</replaceable>:!<replaceable>substitute-value</replaceable>}</code>.
        </para>
        <para>
            You can use a switch substitute if the data resolves to <type>a boolean</type>.
            The syntax is: <code>${<replaceable>reference-name</replaceable>:{<replaceable>separator</replaceable> <replaceable>value-if-false</replaceable> <replaceable>separator</replaceable> <replaceable>value-if-true</replaceable>}}</code> (spaces added for readability only, they are not ignored when parsed).
        </para>
        <para>
            You can use a range substitute if the data resolves to <type>a number</type>.
            The syntax is: <code>${<replaceable>reference-name</replaceable>:[<replaceable>separator</replaceable> <replaceable>range-start</replaceable> <replaceable>separator</replaceable> <replaceable>range-end</replaceable> <optional><replaceable>separator</replaceable> <replaceable>substitute-value</replaceable>…</optional>]}</code> (spaces added for readability only, they are not ignored when parsed, the external square brackets <literal>[]</literal> are literals here).
        </para>
        <para>
            You can use a prettify flag to make a big value more readable.
            The syntax is: <code>${<replaceable>reference-name</replaceable>(<replaceable>flag</replaceable><optional><replaceable>addition</replaceable></optional>)}</code>.
            The following flags are supported:
        </para>
        <variablelist>
            <varlistentry>
                <term><literal>f</literal></term>
                <listitem>
                    <para>Work on <type>a number</type>. It will display the value as a float, allowing for extra formatting, as with printf:</para>
                    <para>Optionally, you can add a width (optionally with zero-padding): <code><optional>0</optional><replaceable>width</replaceable></code></para>
                    <para>Optionally, you can add a precision: <code>.<replaceable>presicion</replaceable></code></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>p</literal></term>
                <term><literal>b</literal></term>
                <listitem>
                    <para>Work on <type>a number</type>. They will reduce the number to a minimum, adding the corresponding SI prefix (or binary prefix for <literal>b</literal>).</para>
                    <para>You can use the same additions as flag <literal>f</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>t</literal></term>
                <listitem>
                    <para>Work on <type>a number</type>. The number will be used as a UNIX timestamp.</para>
                    <para>You can have an strftime-like format string as addition.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>d</literal></term>
                <listitem>
                    <para>Work on <type>a number</type>. The number will be used as seconds.</para>
                    <para>
                        You can have a nested format string as addition, with the following data available:
                        <simplelist type="inline">
                            <member><literal>%{weeks}</literal></member>
                            <member><literal>%{days}</literal></member>
                            <member><literal>%{hours}</literal></member>
                            <member><literal>%{minutes}</literal></member>
                            <member><literal>%{seconds}</literal></member>
                            <member><literal>%{milliseconds}</literal></member>
                            <member><literal>%{microseconds}</literal></member>
                            <member><literal>%{nanoseconds}</literal></member>
                        </simplelist>.
                    </para>
                    <para>The default format is <literal>%{weeks:+%{weeks} week%{weeks:[;2;2;;s]} }%{days:+%{days} day%{days:[;2;2;;s]} }%{hours:+%{hours} hour%{hours:[;2;2;;s]} }%{minutes:+%{minutes} minute%{minutes:[;2;2;;s]} }%{seconds:-0} second%{seconds:[;2;2;;s]}</literal>.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            You can replace parts of the data using the regex mechanism.
            The syntax is: <code>${<replaceable>reference-name</replaceable>/<replaceable>regex</replaceable>/<replaceable>replacement</replaceable>}</code>.
            The <replaceable>replacement</replaceable> part is optional (including the preceding forward slash). If it is omitted, matching parts of the data will simply be removed.
            You can repeat the <code>/<replaceable>regex</replaceable>/<replaceable>replacement</replaceable></code> part to replace as many patterns as you like.
            Each pattern is matched against the previous replacement so be careful in your order.
        </para>
        <para>Examples (with data and resolved string):</para>
        <variablelist>
            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal> and <varname>fruit</varname> is <literal>"pear"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit:-banana}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal> and <varname>fruit</varname> is <literal>"pear"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit:-banana}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal> and <varname>fruit</varname> is <literal>nothing</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a banana.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}${addition:+ cooked with }${addition}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal> and <varname>addition</varname> is <literal>"chocolate"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear cooked with chocolate.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}${addition:+ cooked with }${addition}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal>and <varname>addition</varname> is <literal>nothing</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${addition:! raw }${fruit}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal> and <varname>addition</varname> is <literal>"chocolate"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${addition:! raw }${fruit}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal>and <varname>addition</varname> is <literal>nothing</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a raw pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${mode} mode is ${active:{;active;inactive}}."</literal></term>
                <listitem>
                    <para><varname>mode</varname> is <literal>"Random"</literal> and <varname>active</varname> is <literal>true</literal>.</para>
                    <para>Resolves to: <literal>Random mode is active.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${note:[;1;5;very bad;bad;good;very good]} ${fruit}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"apple"</literal>and <varname>note</varname> is <literal>5</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a very good apple.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"Battery power: ${power(f03.1)}%."</literal></term>
                <listitem>
                    <para><varname>power</varname> is <literal>80.1</literal>.</para>
                    <para>Resolves to: <literal>Battery power: 080.1%.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"Disk space: ${space(b)}B."</literal></term>
                <listitem>
                    <para><varname>space</varname> is <literal>1048576</literal>.</para>
                    <para>Resolves to: <literal>Disk space: 1MiB.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${time(t)}"</literal></term>
                <listitem>
                    <para><varname>time</varname> is <literal>1519910048</literal>.</para>
                    <para>Resolves to: <literal>Thu Mar  1 14:14:08 2018</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${time(t%F %T)}"</literal></term>
                <listitem>
                    <para><varname>time</varname> is <literal>1519910048</literal>.</para>
                    <para>Resolves to: <literal>2018-03-01 14:14:08</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${buildtime(d)}"</literal></term>
                <listitem>
                    <para><varname>buildtime</varname> is <literal>905</literal>.</para>
                    <para>Resolves to: <literal>15 minutes 5 seconds</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}${addition/^/ cooked with }."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal> and <varname>addition</varname> is <literal>"chocolate"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear cooked with chocolate.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}${addition/^/ cooked with }."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal>and <varname>addition</varname> is <literal>nothing</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear.</literal></para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><literal>"${name} is eating a ${fruit}${addition/^/ cooked with /$/ from Switzerland}."</literal></term>
                <listitem>
                    <para><varname>name</varname> is <literal>"Bob"</literal>, <varname>fruit</varname> is <literal>"pear"</literal> and <varname>addition</varname> is <literal>"chocolate"</literal>.</para>
                    <para>Resolves to: <literal>Bob is eating a pear cooked with chocolate from Switzerland.</literal></para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect2>

    <refsect2 id="nk-colour-type-description">
        <title>Colour strings</title>

        <para>
            The <type>colour string</type> format is borrowed from the <ulink url="https://www.w3.org/TR/css-color-4/">CSS4 Color values</ulink>.
            Hexadecimal (<literal>#</literal>-prefixed), <literal>rgb()</literal> RGB(A), <literal>hsl()</literal> HSL(A), <literal>hwb()</literal> HWB and colour names notations are supported.
        </para>

        <para>Here is a quick description:</para>
        <variablelist>
            <varlistentry>
                <term><code>#<replaceable>RR</replaceable><replaceable>GG</replaceable><replaceable>BB</replaceable><optional><replaceable>AA</replaceable></optional></code></term>
                <term><code>#<replaceable>R</replaceable><replaceable>G</replaceable><replaceable>B</replaceable><optional><replaceable>A</replaceable></optional></code></term>
                <listitem>
                    <para>Each value is an <type>hexadecimal</type> value in the <literal>0x00</literal>-<literal>0xff</literal> range.</para>
                    <para>The alpha value is an extension of the CSS3 notation and is optional.</para>
                    <para>The single-letter version means <emphasis>duplicating</emphasis> the character (e.g. <literal>"#123"</literal> means <literal>"#112233"</literal>).</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><code>rgb(<replaceable>red</replaceable>, <replaceable>green</replaceable>, <replaceable>blue</replaceable>)</code></term>
                <term><code>rgba(<replaceable>red</replaceable>, <replaceable>green</replaceable>, <replaceable>blue</replaceable>, <replaceable>alpha</replaceable>)</code></term>
                <listitem>
                    <para>Each colour value can be an <type>number</type> in the <literal>0</literal>-<literal>255</literal> range or a <type>percentage</type> value.</para>
                    <para>The alpha value is a <type>floating point</type> or a <type>percentage</type> value.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><code>hsl(<replaceable>hue</replaceable>, <replaceable>saturation</replaceable>, <replaceable>lightness</replaceable>)</code></term>
                <term><code>hsla(<replaceable>hue</replaceable>, <replaceable>saturation</replaceable>, <replaceable>lightness</replaceable>, <replaceable>alpha</replaceable>)</code></term>
                <listitem>
                    <para>Hue is an <type>angle</type> either in <type>degrees</type> (unit <code>deg</code> or no unit), <type>gradians</type> (unit <code>grab</code>), <type>radians</type> (unit <code>rad</code>) or <type>turns</type> (unit <code>turn</code>, a <type>floating point number</type> from <literal>0</literal> to <literal>1</literal>).</para>
                    <para>The saturation and lightness values are <type>percentage</type> values.</para>
                    <para>The alpha value is the same as the <code>rgba()</code> notation.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><code>hwb(<replaceable>hue</replaceable>, <replaceable>whiteness</replaceable>, <replaceable>blackness</replaceable><optional>, <replaceable>alpha</replaceable></optional>)</code></term>
                <listitem>
                    <para>Hue is the same as the <code>hsl()</code> notation.</para>
                    <para>The whiteness and blackness values are <type>percentage</type> values.</para>
                    <para>The alpha value is the same as the <code>rgba()</code> notation.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>a CSS4-defined colour name</term>
                <listitem>
                    <para>One of the named colour from the <ulink url="https://www.w3.org/TR/css-color-4/#named-color">CSS4 Color names list</ulink>.</para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term><code>transparent</code></term>
                <listitem>
                    <para>Special colour treated as <code>rgba(0, 0, 0, 0)</code>.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect2>

    <refsect2 id="nk-bindings-type-description">
        <title>Binding strings</title>

        <para>
            The <type>binding string</type> format supports two (and a half) notations. It can be either <literal><replaceable>Modifier</replaceable>-<replaceable>Modifier</replaceable>-<replaceable>Bind</replaceable></literal>
            or the <ulink url="https://developer.gnome.org/gtk3/stable/gtk3-Keyboard-Accelerators.html#gtk-accelerator-parse">GTK+ accelerator format</ulink>.
        </para>
        <para>
            The bind can either be a keysym name, a keycode in square brackets (e.g. <literal>[10]</literal>) or a mouse button specification (e.g. <literal>MousePrimary</literal> or <literal>MouseDPrimary</literal> for double click).
        </para>
    </refsect2>
</refentry>
